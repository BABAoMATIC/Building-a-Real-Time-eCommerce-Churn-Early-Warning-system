config:
  target: 'http://localhost:5000'
  phases:
    # Warm-up phase
    - duration: 30
      arrivalRate: 5
      name: "Warm-up phase"
    # Ramp-up phase
    - duration: 60
      arrivalRate: 10
      rampTo: 50
      name: "Ramp-up phase"
    # Sustained load phase
    - duration: 120
      arrivalRate: 50
      name: "Sustained load phase"
    # Peak load phase
    - duration: 60
      arrivalRate: 100
      name: "Peak load phase"
    # Cool-down phase
    - duration: 30
      arrivalRate: 20
      name: "Cool-down phase"
  
  # HTTP configuration
  http:
    timeout: 30
    pool: 100
  
  # Metrics and reporting
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
  
  # Environment variables
  environments:
    local:
      target: 'http://localhost:5000'
    staging:
      target: 'http://staging-api.example.com:5000'
    production:
      target: 'http://api.example.com:5000'

# Test scenarios
scenarios:
  - name: "Churn Prediction API Load Test"
    weight: 100
    flow:
      # Generate random user data
      - function: "generateRandomUserData"
      
      # Test different event types
      - function: "testRandomEventType"
      
      # Make prediction request
      - post:
          url: "/predict-churn"
          headers:
            Content-Type: "application/json"
          json:
            user_id: "{{ userId }}"
            event_type: "{{ eventType }}"
            timestamp: "{{ timestamp }}"
            metadata: "{{ metadata }}"
          capture:
            - json: "$.churn_score"
              as: "churnScore"
          expect:
            - statusCode: 200
            - hasProperty: "churn_score"
      
      # Validate response
      - function: "validateResponse"
      
      # Log metrics
      - function: "logMetrics"

# Custom functions
functions: |
  function generateRandomUserData(context, events, done) {
    const userIds = [
      "user_001", "user_002", "user_003", "user_004", "user_005",
      "user_006", "user_007", "user_008", "user_009", "user_010",
      "user_011", "user_012", "user_013", "user_014", "user_015",
      "user_016", "user_017", "user_018", "user_019", "user_020",
      "user_021", "user_022", "user_023", "user_024", "user_025",
      "user_026", "user_027", "user_028", "user_029", "user_030",
      "user_031", "user_032", "user_033", "user_034", "user_035",
      "user_036", "user_037", "user_038", "user_039", "user_040",
      "user_041", "user_042", "user_043", "user_044", "user_045",
      "user_046", "user_047", "user_048", "user_049", "user_050",
      "user_051", "user_052", "user_053", "user_054", "user_055",
      "user_056", "user_057", "user_058", "user_059", "user_060",
      "user_061", "user_062", "user_063", "user_064", "user_065",
      "user_066", "user_067", "user_068", "user_069", "user_070",
      "user_071", "user_072", "user_073", "user_074", "user_075",
      "user_076", "user_077", "user_078", "user_079", "user_080",
      "user_081", "user_082", "user_083", "user_084", "user_085",
      "user_086", "user_087", "user_088", "user_089", "user_090",
      "user_091", "user_092", "user_093", "user_094", "user_095",
      "user_096", "user_097", "user_098", "user_099", "user_100"
    ];
    
    const pages = [
      "/home", "/products", "/product-detail", "/cart", "/checkout",
      "/profile", "/orders", "/search", "/category", "/about",
      "/contact", "/help", "/faq", "/terms", "/privacy"
    ];
    
    const devices = ["desktop", "mobile", "tablet"];
    const referrers = ["google", "facebook", "direct", "email", "social", "organic"];
    
    // Random user ID
    context.vars.userId = userIds[Math.floor(Math.random() * userIds.length)];
    
    // Random page
    context.vars.page = pages[Math.floor(Math.random() * pages.length)];
    
    // Random device
    context.vars.device = devices[Math.floor(Math.random() * devices.length)];
    
    // Random referrer
    context.vars.referrer = referrers[Math.floor(Math.random() * referrers.length)];
    
    // Current timestamp
    context.vars.timestamp = new Date().toISOString();
    
    return done();
  }

  function testRandomEventType(context, events, done) {
    const eventTypes = [
      "add_to_cart", "product_view", "bounce", "checkout",
      "login", "logout", "signup", "purchase", "search",
      "page_view", "category_view", "wishlist_add", "review_submit"
    ];
    
    // Random event type
    context.vars.eventType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
    
    // Generate metadata based on event type
    let metadata = {
      page: context.vars.page,
      device: context.vars.device,
      referrer: context.vars.referrer,
      session_length: Math.random() * 30 + 1, // 1-30 seconds
      timestamp: context.vars.timestamp
    };
    
    // Add event-specific metadata
    switch (context.vars.eventType) {
      case "add_to_cart":
        metadata.product_id = `PROD-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
        metadata.quantity = Math.floor(Math.random() * 5) + 1;
        metadata.price = Math.round((Math.random() * 200 + 10) * 100) / 100;
        break;
        
      case "product_view":
        metadata.product_id = `PROD-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
        metadata.category = ["electronics", "clothing", "books", "home", "sports"][Math.floor(Math.random() * 5)];
        metadata.view_duration = Math.round((Math.random() * 120 + 5) * 100) / 100;
        break;
        
      case "bounce":
        metadata.session_length = Math.random() * 5; // 0-5 seconds for bounce
        break;
        
      case "purchase":
        metadata.order_id = `ORDER-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;
        metadata.total_amount = Math.round((Math.random() * 500 + 20) * 100) / 100;
        metadata.payment_method = ["credit_card", "paypal", "apple_pay", "google_pay"][Math.floor(Math.random() * 4)];
        break;
        
      case "search":
        metadata.search_term = ["laptop", "phone", "book", "shirt", "shoes"][Math.floor(Math.random() * 5)];
        metadata.results_count = Math.floor(Math.random() * 100);
        break;
    }
    
    context.vars.metadata = metadata;
    
    return done();
  }

  function validateResponse(requestParams, response, context, events, done) {
    // Validate churn score
    if (response.body && response.body.churn_score !== undefined) {
      const churnScore = response.body.churn_score;
      
      // Check if churn score is valid (0-1)
      if (churnScore < 0 || churnScore > 1) {
        console.error(`Invalid churn score: ${churnScore}`);
      }
      
      // Check if churn score matches expected logic
      const expectedScore = context.vars.eventType === 'bounce' ? 0.9 : 0.2;
      if (Math.abs(churnScore - expectedScore) > 0.001) {
        console.error(`Unexpected churn score: ${churnScore}, expected: ${expectedScore}`);
      }
    }
    
    return done();
  }

  function logMetrics(requestParams, response, context, events, done) {
    // Log request metrics
    const metrics = {
      userId: context.vars.userId,
      eventType: context.vars.eventType,
      churnScore: response.body ? response.body.churn_score : null,
      responseTime: response.timings.response,
      statusCode: response.statusCode,
      timestamp: new Date().toISOString()
    };
    
    // You can log to console, file, or external service
    if (response.statusCode === 200) {
      console.log(`✅ Success: ${metrics.userId} - ${metrics.eventType} - Score: ${metrics.churnScore} - Time: ${metrics.responseTime}ms`);
    } else {
      console.error(`❌ Error: ${metrics.userId} - ${metrics.eventType} - Status: ${metrics.statusCode} - Time: ${metrics.responseTime}ms`);
    }
    
    return done();
  }
